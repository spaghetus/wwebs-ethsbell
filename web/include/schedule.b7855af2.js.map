{"mappings":"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","sources":["frontend/schedule/calendar.js"],"sourcesContent":["let all_data;\n\nconst calendarElement = document.querySelector('#event-wrapper');\nconst nowBarElement = document.querySelector('#calendar-today #now');\nconst preferred_event_min_width = 200;\nconst min_visible_width = 50;\nconst min_event_height = 47.5;\nconst padding = 5;\nconst pixels_per_minute = 1.5;\nlet startDate;\nlet startTime;\nlet endDate;\nlet endTime;\nlet events;\nlet showNowBar = true;\nlet backgroundColor = 'rgb(255, 255, 255)';\nlet textColor = 'black';\n\n/// Place period boxes for a list of periods.\nfunction place_boxes(data_unprocessed, date = current_date(), force = false, today = true) {\n\tshowNowBar = today;\n\n\tcalendarElement.innerHTML = '';\n\tif (data_unprocessed && (!events || force)) {\n\t\tcalendarElement.style.height = 'auto';\n\t\tif (!data_unprocessed.periods[0]) {\n\t\t\tupdateNowBar();\n\t\t\treturn;\n\t\t}\n\n\t\tconst data = replace_period(data_unprocessed.periods.filter(p => p.kind !== 'Passing')).filter(v => v);\n\t\tstartDate = date_from_api(data[0].start, date);\n\t\tstartTime = startDate.getTime() / 1000;\n\t\tendDate = date_from_api(data[data.length - 1].end, date);\n\t\tendTime = endDate.getTime() / 1000;\n\t\tupdateNowBar();\n\t\tconst sInDay = endTime - startTime;\n\t\tlet containerHeight = (sInDay / 60) * pixels_per_minute;\n\t\tconst lastColHeight = {};\n\n\t\t// Resolve rows so everything is mutually non-intersecting.\n\t\tevents = [];\n\n\t\tfor (const [i, period] of data.sort((a, b) => date_from_api(a.start, date) - date_from_api(b.start, date)).entries()) {\n\t\t\t// Set up variables\n\t\t\tconst start = date_from_api(period.start, date).getTime() / 1000;\n\t\t\tconst end = date_from_api(period.end, date).getTime() / 1000;\n\t\t\tconst duration = end - start;\n\t\t\tlet heightChange = 0;\n\n\t\t\tconst startPos = ((start - startTime) / 60) * pixels_per_minute;\n\t\t\tlet height = (duration / 60) * pixels_per_minute;\n\t\t\tconst endPos = startPos + height;\n\t\t\tif (height < min_event_height) {\n\t\t\t\theightChange = min_event_height - height;\n\t\t\t\theight = min_event_height;\n\t\t\t}\n\n\t\t\tlet col = 0;\n\n\t\t\twhile (events.filter(event => event.col === col).some(event => startPos < event.endPos || endPos < event.startPos)) {\n\t\t\t\tcol++;\n\t\t\t}\n\n\t\t\tlastColHeight[col] = heightChange;\n\n\t\t\tevents.push({\n\t\t\t\tstartPos,\n\t\t\t\tendPos,\n\t\t\t\theight,\n\t\t\t\tcol,\n\t\t\t\tperiod,\n\t\t\t});\n\t\t}\n\n\t\tcontainerHeight += Math.max(...Object.values(lastColHeight));\n\t\tcalendarElement.style.height = `${containerHeight}px`;\n\t}\n\n\tif (!events) {\n\t\treturn;\n\t}\n\n\tconst indicatorDate = new Date(Math.ceil(startDate.getTime() / 1000 / 60 / 60) * 1000 * 60 * 60);\n\twhile (indicatorDate.getTime() < endDate.getTime()) {\n\t\tconst time = indicatorDate.toLocaleTimeString('en-US');\n\t\tconst formatted = `${time.split(':')[0]} ${time.split(' ')[1]}`;\n\t\tconst top = ((indicatorDate.getTime() / 1000 - startTime) / 60) * pixels_per_minute;\n\t\tconst span = document.createElement('span');\n\t\tspan.classList.add('time');\n\t\tspan.textContent = formatted;\n\t\tspan.style.top = `${top}px`;\n\t\tcalendarElement.append(span);\n\t\tindicatorDate.setTime(indicatorDate.getTime() + 60 * 60 * 1000);\n\t}\n\n\tconst number_cols = Math.max(...events.map(event => event.col)) + 1;\n\tconst colwidth = calendarElement.clientWidth / number_cols;\n\tconst percent = (1 / number_cols) * 100;\n\n\tif (data_unprocessed) {\n\t\tbackgroundColor = data_unprocessed.color ? bytes_to_color(data_unprocessed.color) : '#FFFFFF';\n\t\ttextColor = black_or_white(backgroundColor);\n\t}\n\n\tfor (const event of events) {\n\t\tlet colspan = 1;\n\n\t\twhile (event.col + colspan < number_cols && !events.filter(e => e.col === event.col + colspan).some(e => [event.startPos, event.endPos].some(p => p >= e.startPos && p <= e.endPos))) {\n\t\t\tcolspan++;\n\t\t}\n\n\t\tlet widthOffset = event.col === 0 ? 0 : padding * -2;\n\t\tif (colwidth * colspan < preferred_event_min_width && colspan < number_cols) {\n\t\t\twidthOffset = preferred_event_min_width - colwidth * colspan;\n\t\t\tif (widthOffset > colwidth) {\n\t\t\t\twidthOffset += colwidth - min_visible_width;\n\t\t\t}\n\t\t}\n\n\t\tconst leftOffset = widthOffset * event.col;\n\n\t\tconst element = document.createElement('div');\n\t\telement.classList.add('event');\n\n\t\telement.style.top = `${event.startPos - 3}px`;\n\t\telement.style.height = `${event.height}px`;\n\n\t\telement.style.left = `calc(${percent * event.col}% ${leftOffset < 0 ? '+' : '-'} ${Math.abs(leftOffset)}px)`;\n\t\telement.style.width = `calc(${percent * colspan}% ${widthOffset < 0 ? '-' : '+'} ${Math.abs(widthOffset)}px)`;\n\n\t\telement.style.zIndex = number_cols - event.col + 1;\n\t\telement.setAttribute('tabindex', '0');\n\n\t\telement.addEventListener('focus', () => {\n\t\t\tfor (const element_ of document.querySelectorAll('#calendar-table .event.selected')) {\n\t\t\t\telement_.classList.remove('selected');\n\t\t\t}\n\n\t\t\telement.classList.add('selected');\n\t\t});\n\n\t\tconst childElement = document.createElement('div');\n\t\tchildElement.classList.add('event-child');\n\t\tchildElement.style.backgroundColor = backgroundColor;\n\t\tchildElement.style.color = textColor;\n\n\t\tconst nameElement = document.createElement('span');\n\t\tnameElement.classList.add('event-name');\n\t\tnameElement.innerHTML = period_html(event.period);\n\t\tchildElement.append(nameElement);\n\n\t\tconst timeElement = document.createElement('span');\n\t\ttimeElement.classList.add('event-time');\n\t\ttimeElement.innerHTML = `${human_time(event.period.start)} - ${human_time(event.period.end)} (${human_time_left(event.period.end, event.period.start, true)})`;\n\t\tchildElement.append(timeElement);\n\n\t\telement.append(childElement);\n\t\tcalendarElement.append(element);\n\t}\n}\n\nwindow.addEventListener('resize', () => place_boxes());\n\nsetInterval(updateNowBar, 1000);\n\nfunction updateNowBar() {\n\tconst now = current_date().getTime() / 1000;\n\tif (nowBarElement && showNowBar && startTime && endTime && now >= startTime && now <= endTime) {\n\t\tnowBarElement.style.top = `${((now - startTime) / 60) * pixels_per_minute + 10}px`;\n\t\tnowBarElement.style.display = 'block';\n\t} else {\n\t\tnowBarElement.style.display = 'none';\n\t}\n}\n\nupdateNowBar();\n\nObject.assign(window, {\n\tplace_boxes,\n});\n"],"names":["$a09b35284f9a5ae0$var$calendarElement","document","querySelector","$a09b35284f9a5ae0$var$nowBarElement","$a09b35284f9a5ae0$var$startDate","$a09b35284f9a5ae0$var$startTime","$a09b35284f9a5ae0$var$endDate","$a09b35284f9a5ae0$var$endTime","$a09b35284f9a5ae0$var$events","$a09b35284f9a5ae0$var$showNowBar","$a09b35284f9a5ae0$var$backgroundColor","$a09b35284f9a5ae0$var$textColor","$a09b35284f9a5ae0$var$place_boxes","data_unprocessed","date","current_date","force","today","innerHTML","style","height","periods","$a09b35284f9a5ae0$var$updateNowBar","data","replace_period","filter","p","kind","v","date_from_api","start","getTime","length","end","containerHeight","lastColHeight","i","period","sort","a","b","entries","heightChange","startPos","endPos","col","event","some","push","Math","max","Object","values","indicatorDate","Date","ceil","time","toLocaleTimeString","formatted","split","top","span","createElement","classList","add","textContent","append","setTime","number_cols","map","colwidth","clientWidth","percent","color","bytes_to_color","black_or_white","colspan","e","widthOffset","$a09b35284f9a5ae0$var$padding","leftOffset","element","left","abs","width","zIndex","setAttribute","addEventListener","element_","querySelectorAll","remove","childElement","backgroundColor","nameElement","period_html","timeElement","human_time","human_time_left","now","display","window","setInterval","assign"],"version":3,"file":"schedule.b7855af2.js.map"}
{"mappings":"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","sources":["frontend/global/timeline.js"],"sourcesContent":["let viewport_seconds = 3600 * 4; // The number of seconds the viewport should show\nlet viewport_offset = 0;\nconst row_height = 50; // The height of a row\nconst box_height = 40; // The height of a box\nconst row_start = 10; // The height rows start at\nconst text_height = 30; // The size of the font\nlet has_resize_listener = false;\nlet scroll_timeout;\nlet last_scroll_touch_x;\nlet scrolled_distance = 0;\n\n/// Place period boxes for a list of periods.\nfunction place_boxes(data_unprocessed) {\n\tlet data = replace_period(data_unprocessed.filter(p => p.kind !== 'Passing'));\n\tif (!has_resize_listener) {\n\t\twindow.addEventListener('resize', () => {\n\t\t\tplace_boxes(all_data);\n\t\t});\n\t\thas_resize_listener = true;\n\t\tconst set_length = event_ => {\n\t\t\tviewport_seconds = event_.target.value * 3600;\n\t\t\tplace_boxes(all_data);\n\t\t};\n\n\t\tconst set_offset = event_ => {\n\t\t\tviewport_offset = event_.target.value * 3600;\n\t\t\tplace_boxes(all_data);\n\t\t};\n\n\t\t// Update fields\n\t\tconst events = ['input'];\n\t\tgetel('timeline_length').value = viewport_seconds / 3600;\n\t\tgetel('timeline_offset').value = 0;\n\t\tfor (const event_name of events) {\n\t\t\tgetel('timeline_length')?.addEventListener(event_name, set_length);\n\t\t\tgetel('timeline_offset')?.addEventListener(event_name, set_offset);\n\t\t}\n\n\t\t// Scroll behaviour\n\t\tconst scroll = () => {\n\t\t\tscroll_timeout = false;\n\t\t\tviewport_offset += scrolled_distance * (navigator.userAgent.includes('Chrom') ? -2 : 2);\n\t\t\tscrolled_distance = 0;\n\t\t\tplace_boxes(all_data);\n\t\t\tgetel('timeline_offset').value = Math.round(viewport_offset / 360) / 10;\n\t\t};\n\n\t\tgetel('timeline')?.addEventListener('wheel', event => {\n\t\t\tconst deltaX = event.shiftKey ? event.deltaY : event.deltaX;\n\t\t\tscrolled_distance += deltaX * 3;\n\t\t\tif (!scroll_timeout) {\n\t\t\t\tsetTimeout(scroll, 10);\n\t\t\t\tscroll_timeout = true;\n\t\t\t}\n\t\t});\n\t\tgetel('timeline')?.addEventListener('touchmove', event => {\n\t\t\tconst new_touch_x = event.touches[0].clientX;\n\t\t\tif (last_scroll_touch_x) {\n\t\t\t\tscrolled_distance += (last_scroll_touch_x - new_touch_x) * 10;\n\t\t\t\tif (!scroll_timeout) {\n\t\t\t\t\tsetTimeout(scroll, 10);\n\t\t\t\t\tscroll_timeout = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlast_scroll_touch_x = new_touch_x;\n\t\t});\n\t\tgetel('timeline')?.addEventListener('touchend', () => {\n\t\t\tlast_scroll_touch_x = undefined;\n\t\t});\n\t}\n\n\t// Resolve rows so everything is mutually non-intersecting.\n\tconst boxes = [];\n\tdata = data.flat().filter(v => v);\n\tdata.sort((a, b) => a.start - b.start);\n\tfor (const period of data) {\n\t\t// Set up variables\n\t\tconst start = period.start_timestamp;\n\t\tlet row = 0;\n\t\tlet intersecting = 0;\n\t\t// Increment the row until nothing intersects.\n\t\tdo {\n\t\t\tintersecting = 0;\n\t\t\tfor (const box of boxes) {\n\t\t\t\tif (box.row === row && box.end > start) {\n\t\t\t\t\tintersecting += 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (intersecting > 0) {\n\t\t\t\trow += 1;\n\t\t\t}\n\t\t} while (intersecting > 0);\n\n\t\tboxes.push({\n\t\t\trow,\n\t\t\tstart: period.start_timestamp,\n\t\t\tend: period.end_timestamp,\n\t\t\tkind: period.kind,\n\t\t\tname: period.friendly_name,\n\t\t\tperiod,\n\t\t});\n\t}\n\n\t// Determine where the boxes should be placed on-screen\n\tconst now = current_date().getTime() / 1000 + viewport_offset;\n\tconst viewport_width = getel('timeline>svg').clientWidth;\n\tfor (const box of boxes) {\n\t\tconst length = box.end - box.start;\n\t\tconst relative_time = box.start - now;\n\t\tconst fraction_time = relative_time / viewport_seconds;\n\t\tlet fraction_position = 0.5 + fraction_time;\n\t\tlet fraction_outside_length = 0;\n\t\tif (fraction_position < 0) {\n\t\t\tfraction_outside_length = -fraction_position;\n\t\t\tfraction_position = 0;\n\t\t}\n\n\t\tconst absolute_x = viewport_width * fraction_position;\n\t\tfraction_position *= 100;\n\t\tlet fraction_length = length / viewport_seconds;\n\t\tfraction_length -= fraction_outside_length;\n\t\tif (fraction_length <= 0 || fraction_position > 100) {\n\t\t\tbox.hidden = true;\n\t\t} else {\n\t\t\tfraction_length *= 100;\n\t\t\tif (fraction_length + fraction_position > 100) {\n\t\t\t\tfraction_length = 100 - fraction_position;\n\t\t\t}\n\n\t\t\tbox.x = fraction_position;\n\t\t\tbox.y = row_start + row_height * box.row;\n\t\t\tbox.w = fraction_length;\n\t\t\tbox.h = box_height;\n\t\t\tconst text_margin = (box_height - text_height) / 2;\n\t\t\tbox.tx = absolute_x + text_margin;\n\t\t\tbox.ty = box.y + box.h / 2 + text_margin * 2;\n\t\t\tbox.th = text_height;\n\t\t}\n\t}\n\n\t// Set the box's emoji and TODO color\n\tfor (const box of boxes) {\n\t\tif (box.hidden) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet emoji;\n\t\tif (box.kind.Class) {\n\t\t\temoji = '🏫';\n\t\t} else if (box.kind.ClassOrLunch) {\n\t\t\temoji = '🏫/🥪';\n\t\t} else {\n\t\t\tswitch (box.kind) {\n\t\t\t\tcase 'Lunch':\n\t\t\t\t\temoji = '🥪';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Break':\n\t\t\t\t\temoji = '🛌';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'AMSupport':\n\t\t\t\t\temoji = '🐔';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Passing':\n\t\t\t\t\temoji = '🏃';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'BeforeSchool':\n\t\t\t\t\temoji = '🌄';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'AfterSchool':\n\t\t\t\t\temoji = '🌇';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Announcements':\n\t\t\t\t\temoji = '📣';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\temoji = emoji || '😕';\n\t\t\t}\n\t\t}\n\n\t\tbox.emoji = emoji;\n\t\tbox.color = 'white';\n\t}\n\n\t// Write the boxes to the DOM\n\tgetel('boxes').innerHTML = '';\n\tfor (const box of boxes) {\n\t\tif (box.hidden) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst element = document.createElement('div');\n\t\telement.classList.add('timeline_rect');\n\t\telement.style.left = `${box.x}%`;\n\t\telement.style.top = `${box.y}px`;\n\t\telement.style.width = `${box.w}%`;\n\t\telement.style.height = `${box.h}px`;\n\t\telement.style['font-size'] = `${box.th}px`;\n\t\telement.innerHTML = `&nbsp;${box.emoji} ${period_html(box.period)}`;\n\t\tgetel('boxes').append(element);\n\t}\n\n\tconst pointer_time = new Date(current_date().getTime() + viewport_offset * 1000);\n\tgetel('pointer_time').innerHTML = pointer_time.toLocaleTimeString('en-US', {hour: 'numeric', minute: '2-digit'});\n\tconst left_time = new Date(current_date().getTime() + viewport_offset * 1000 - viewport_seconds * 500);\n\tgetel('left_time').innerHTML = left_time.toLocaleTimeString('en-US', {hour: 'numeric', minute: '2-digit'});\n\tconst right_time = new Date(current_date().getTime() + viewport_offset * 1000 + viewport_seconds * 500);\n\tgetel('right_time').innerHTML = right_time.toLocaleTimeString('en-US', {hour: 'numeric', minute: '2-digit'});\n}\n\nObject.assign(window, {\n\tplace_boxes,\n});\n"],"names":["$7587b2bfa78d33b3$var$viewport_seconds","$7587b2bfa78d33b3$var$viewport_offset","$7587b2bfa78d33b3$var$scroll_timeout","$7587b2bfa78d33b3$var$last_scroll_touch_x","$7587b2bfa78d33b3$var$has_resize_listener","$7587b2bfa78d33b3$var$scrolled_distance","Object","assign","window","$7587b2bfa78d33b3$var$place_boxes","data_unprocessed","data","replace_period","filter","p","kind","ref","ref1","ref2","addEventListener","all_data","set_length","event_","target","value","set_offset","events","getel","event_name","ref3","ref4","scroll","navigator","userAgent","includes","Math","round","event","deltaX","shiftKey","deltaY","setTimeout","new_touch_x","touches","clientX","undefined","boxes","flat","v","sort","a","b","start","period","start_timestamp","row","intersecting","box","end","push","end_timestamp","name","friendly_name","now","current_date","getTime","viewport_width","clientWidth","box1","length","fraction_position","fraction_outside_length","absolute_x","fraction_length","hidden","x","y","w","h","text_margin","tx","ty","th","box2","emoji","Class","ClassOrLunch","color","innerHTML","box3","element","document","createElement","classList","add","style","left","top","width","height","period_html","append","pointer_time","Date","toLocaleTimeString","hour","minute","left_time","right_time"],"version":3,"file":"timeline.cd3398a9.js.map"}